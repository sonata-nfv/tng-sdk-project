---
# requires to start the service before (tng-project -s)
test_name: Test /pings endpoint
stages:
  - name: Ping pong (for health checks)
    request:
      url: http://localhost:5098/api/v1/pings
      method: GET
    # expected response
    response:
      status_code: 200
      body:
        alive_since: !anything

---
test_name: Test /projects endpoint
stages:
  - name: Add new project with all defaults
    request:
      url: http://localhost:5098/api/v1/projects
      method: POST
    response:
      body:
        uuid: !anything
        error_msg: !anything
      # save the project UUID for later tests
      save:
        body:
          uuid_project1: uuid

  - name: Add new project with specific descriptorgen args
    request:
      url: http://localhost:5098/api/v1/projects
      method: POST
      json:
        author: alice
        vendor: eu.tango
        vnfs: 3
      headers:
        content-type: application/json
    response:
      body:
        uuid: !anything
        error_msg: !anything
      save:
        body:
          uuid_project2: uuid

  - name: Check if new projects are included in list
    request:
      url: http://localhost:5098/api/v1/projects
      method: GET
    response:
      body:
        # check if the previously created projects are in the returned list of all projects
        $ext:
          function: tests.helpers:check_elements_in_list
          extra_kwargs:
            elements:
              - "{uuid_project1:s}"
              - "{uuid_project2:s}"
            list_key: projects

  # /projects/{uuid} endpoint
  - name: Access project
    request:
      url: "http://localhost:5098/api/v1/projects/{uuid_project1:s}"
      method: GET
    response:
      body:
        project_uuid: "{uuid_project1:s}"
        manifest: !anything
        error_msg: !anything

  - name: Delete project
    request:
      url: "http://localhost:5098/api/v1/projects/{uuid_project1:s}"
      method: DELETE
    response:
      status_code: 200
      body:
        project_uuid: "{uuid_project1:s}"

  - name: Access deleted project (should fail)
    request:
      url: "http://localhost:5098/api/v1/projects/{uuid_project1:s}"
      method: GET
    response:
      # project not found
      status_code: 404

  # /projects/{uuid}/files endpoint
  - name: Access project files of other project
    request:
      url: "http://localhost:5098/api/v1/projects/{uuid_project2:s}/files"
      method: GET
    response:
      body:
        project_uuid: "{uuid_project2:s}"
        files: !anything

  # FIXME: doesn't recognize filename argument. wrong content type? works with curl urlencoding
#  - name: Delete project file (project.yml)
#    request:
#      url: "http://localhost:5098/api/v1/projects/{uuid_project2:s}/files"
#      method: DELETE
#      json:
#        filename: "project.yml"
#      headers:
#        content-type: application/json
#    response:
#      body:
#        project_uuid: "{uuid_project2:s}"
#        removed_file: project.yml
#        error_msg: !anything

  - name: Delete other project (cleanup)
    request:
      url: "http://localhost:5098/api/v1/projects/{uuid_project2:s}"
      method: DELETE
    response:
      body:
        project_uuid: "{uuid_project2:s}"

# TODO: upload file (not sure how with tavern)
